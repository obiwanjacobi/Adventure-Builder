@page "/"
@rendermode InteractiveServer
@using Jacobi.AdventureBuilder.GameClient
@using Jacobi.AdventureBuilder.GameContracts

@inject AdventureGameClient _gameClient

<PageTitle>Home</PageTitle>

<h1>Hello, Adventure World!</h1>
<div>Welcome to your new Adventure.</div>

<FluentLabel>@_name</FluentLabel>
<FluentDivider />
<div>@_description</div>

@if (@_commands is not null)
{
    @foreach (var command in @_commands!)
    {
        <div>@command.Description</div>
        <FluentButton @onclick="@(() => ExecuteCommand(command.Id))">@command.Name</FluentButton>

    }
}

@code {
    protected string? _name;
    protected string? _description;
    protected IReadOnlyCollection<GameCommandInfo>? _commands;
    protected IPlayerGrain? _player;
    protected IAdventureWorldGrain? _world;
    protected IPassageGrain? _passage;

    protected override async Task OnInitializedAsync()
    {
        _world = await _gameClient.WorldManager.CreateWorld("CA59D7B3-C88B-499E-A333-9BC5D2906506");
        _player = _gameClient.GetPlayer("PlayerOne");
        var passage = await _world.Start(_player);
        await SetPassage(passage);
        _name = await passage.Name();
        _description = await passage.Description();
        _commands = await passage.CommandInfos();
    }

    async Task ExecuteCommand(string commandId)
    {
        var command = await _passage!.GetCommand(commandId);
        var result = await _player!.Play(_world!, command);
        await SetPassage(result.Passage!);
    }

    private async Task SetPassage(IPassageGrain passage)
    {
        _passage = passage;
        _name = await _passage.Name();
        _description = await _passage.Description();
        _commands = await _passage.CommandInfos();
    }
}
