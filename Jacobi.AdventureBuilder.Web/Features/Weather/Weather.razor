@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="weathergrid" Items="@forecasts" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="WeatherForecast">
        <PropertyColumn Title="Date" Property="@(c => c!.Date)" Align="Align.Start" />
        <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC)" Align="Align.Center" />
        <PropertyColumn Title="Temp. (F)" Property="@(c => c!.TemperatureF)" Align="Align.Center" />
        <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Align="Align.End" />
    </FluentDataGrid>

    @* <table class="table"> *@
    @*     <thead> *@
    @*         <tr> *@
    @*             <th>Date</th> *@
    @*             <th>Temp. (C)</th> *@
    @*             <th>Temp. (F)</th> *@
    @*             <th>Summary</th> *@
    @*         </tr> *@
    @*     </thead> *@
    @*     <tbody> *@
    @*         @foreach (var forecast in forecasts) *@
    @*         { *@
    @*             <tr> *@
    @*                 <td>@forecast.Date.ToShortDateString()</td> *@
    @*                 <td>@forecast.TemperatureC</td> *@
    @*                 <td>@forecast.TemperatureF</td> *@
    @*                 <td>@forecast.Summary</td> *@
    @*             </tr> *@
    @*         } *@
    @*     </tbody> *@
    @* </table> *@
}

@code {
    //private WeatherForecast[]? forecasts;
    private IQueryable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await WeatherApi.GetWeatherAsync()).AsQueryable();
    }
}
